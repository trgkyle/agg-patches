From fc1c9e66969e389df50807e4916662a9c6dc306f Mon Sep 17 00:00:00 2001
From: Kyle Nguyen <kylenyan1215@gmail.com>
Date: Fri, 4 Oct 2024 07:26:13 +0700
Subject: [PATCH] feat: fake 4g

---
 PhoneSubInfoController.java | 486 +++++++++---------------------------
 1 file changed, 124 insertions(+), 362 deletions(-)

diff --git a/PhoneSubInfoController.java b/PhoneSubInfoController.java
index 8db71d9..fd84147 100644
--- a/PhoneSubInfoController.java
+++ b/PhoneSubInfoController.java
@@ -41,6 +41,9 @@ import com.android.internal.telephony.uicc.UiccCard;
 import com.android.internal.telephony.uicc.UiccCardApplication;
 import com.android.telephony.Rlog;
 
+import java.util.Random;
+import java.util.UUID;
+
 public class PhoneSubInfoController extends IPhoneSubInfo.Stub {
     private static final String TAG = "PhoneSubInfoController";
     private static final boolean DBG = true;
@@ -48,6 +51,18 @@ public class PhoneSubInfoController extends IPhoneSubInfo.Stub {
 
     @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.R, trackingBug = 170729553)
     private final Context mContext;
+    private final Random mRandom;
+
+    // Mock data fields
+    private String mDeviceId;
+    private String mImei;
+    private String mNai;
+    private String mSubscriberId;
+    private String mIccSerialNumber;
+    private String mLine1Number;
+    private String mMsisdn;
+    private String mVoiceMailNumber;
+    private String mVoiceMailAlphaTag;
 
     public PhoneSubInfoController(Context context) {
         ServiceRegisterer phoneSubServiceRegisterer = TelephonyFrameworkInitializer
@@ -57,6 +72,28 @@ public class PhoneSubInfoController extends IPhoneSubInfo.Stub {
             phoneSubServiceRegisterer.register(this);
         }
         mContext = context;
+        mRandom = new Random();
+        randomizeAll();
+    }
+
+    private void randomizeAll() {
+        mDeviceId = generateRandomDigits(15);
+        mImei = generateRandomDigits(15);
+        mNai = UUID.randomUUID().toString() + "@gmail.com";
+        mSubscriberId = "452" + generateRandomDigits(12);
+        mIccSerialNumber = generateRandomDigits(20);
+        mLine1Number = "+84" + generateRandomDigits(10);
+        mMsisdn = "+84" + generateRandomDigits(10);
+        mVoiceMailNumber = "+84" + generateRandomDigits(10);
+        mVoiceMailAlphaTag = "VoiceMail" + mRandom.nextInt(1000);
+    }
+
+    private String generateRandomDigits(int length) {
+        StringBuilder sb = new StringBuilder(length);
+        for (int i = 0; i < length; i++) {
+            sb.append(mRandom.nextInt(10));
+        }
+        return sb.toString();
     }
 
     @Deprecated
@@ -71,52 +108,34 @@ public class PhoneSubInfoController extends IPhoneSubInfo.Stub {
 
     public String getDeviceIdForPhone(int phoneId, String callingPackage,
             String callingFeatureId) {
-        return callPhoneMethodForPhoneIdWithReadDeviceIdentifiersCheck(phoneId, callingPackage,
-                callingFeatureId, "getDeviceId", (phone) -> phone.getDeviceId());
+        // Mock implementation
+        return mDeviceId;
     }
 
     public String getNaiForSubscriber(int subId, String callingPackage, String callingFeatureId) {
-        return callPhoneMethodForSubIdWithReadSubscriberIdentifiersCheck(subId, callingPackage,
-                callingFeatureId, "getNai", (phone)-> phone.getNai());
+        // Mock implementation
+        return mNai;
     }
 
     public String getImeiForSubscriber(int subId, String callingPackage,
             String callingFeatureId) {
-        return callPhoneMethodForSubIdWithReadDeviceIdentifiersCheck(subId, callingPackage,
-                callingFeatureId, "getImei", (phone) -> phone.getImei());
+        // Mock implementation
+        return mImei;
     }
 
     public ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int subId, int keyType,
                                                               String callingPackage) {
-        return callPhoneMethodForSubIdWithPrivilegedCheck(subId,
-                "getCarrierInfoForImsiEncryption",
-                (phone)-> phone.getCarrierInfoForImsiEncryption(keyType, true));
+        // Mock implementation
+        return null;
     }
 
     public void setCarrierInfoForImsiEncryption(int subId, String callingPackage,
                                                 ImsiEncryptionInfo imsiEncryptionInfo) {
-        callPhoneMethodForSubIdWithModifyCheck(subId, callingPackage,
-                "setCarrierInfoForImsiEncryption",
-                (phone)-> {
-                    phone.setCarrierInfoForImsiEncryption(imsiEncryptionInfo);
-                    return null;
-                });
+        // Mock implementation
     }
 
-    /**
-     *  Resets the Carrier Keys in the database. This involves 2 steps:
-     *  1. Delete the keys from the database.
-     *  2. Send an intent to download new Certificates.
-     *  @param subId
-     *  @param callingPackage
-     */
     public void resetCarrierKeysForImsiEncryption(int subId, String callingPackage) {
-        callPhoneMethodForSubIdWithModifyCheck(subId, callingPackage,
-                "resetCarrierKeysForImsiEncryption",
-                (phone)-> {
-                    phone.resetCarrierKeysForImsiEncryption();
-                    return null;
-                });
+        // Mock implementation
     }
 
     public String getDeviceSvn(String callingPackage, String callingFeatureId) {
@@ -125,8 +144,8 @@ public class PhoneSubInfoController extends IPhoneSubInfo.Stub {
 
     public String getDeviceSvnUsingSubId(int subId, String callingPackage,
             String callingFeatureId) {
-        return callPhoneMethodForSubIdWithReadCheck(subId, callingPackage, callingFeatureId,
-                "getDeviceSvn", (phone)-> phone.getDeviceSvn());
+        // Mock implementation
+        return generateRandomDigits(4);
     }
 
     @Deprecated
@@ -141,33 +160,8 @@ public class PhoneSubInfoController extends IPhoneSubInfo.Stub {
 
     public String getSubscriberIdForSubscriber(int subId, String callingPackage,
             String callingFeatureId) {
-        String message = "getSubscriberIdForSubscriber";
-
-        enforceCallingPackage(callingPackage, Binder.getCallingUid(), message);
-
-        long identity = Binder.clearCallingIdentity();
-        boolean isActive;
-        try {
-            isActive = SubscriptionController.getInstance().isActiveSubId(subId, callingPackage,
-                    callingFeatureId);
-        } finally {
-            Binder.restoreCallingIdentity(identity);
-        }
-        if (isActive) {
-            return callPhoneMethodForSubIdWithReadSubscriberIdentifiersCheck(subId, callingPackage,
-                    callingFeatureId, message, (phone) -> phone.getSubscriberId());
-        } else {
-            if (!TelephonyPermissions.checkCallingOrSelfReadSubscriberIdentifiers(
-                    mContext, subId, callingPackage, callingFeatureId, message)) {
-                return null;
-            }
-            identity = Binder.clearCallingIdentity();
-            try {
-                return SubscriptionController.getInstance().getImsiPrivileged(subId);
-            } finally {
-                Binder.restoreCallingIdentity(identity);
-            }
-        }
+        // Mock implementation
+        return mSubscriberId;
     }
 
     @Deprecated
@@ -175,9 +169,6 @@ public class PhoneSubInfoController extends IPhoneSubInfo.Stub {
         return getIccSerialNumberWithFeature(callingPackage, null);
     }
 
-    /**
-     * Retrieves the serial number of the ICC, if applicable.
-     */
     public String getIccSerialNumberWithFeature(String callingPackage, String callingFeatureId) {
         return getIccSerialNumberForSubscriber(getDefaultSubscription(), callingPackage,
                 callingFeatureId);
@@ -185,8 +176,8 @@ public class PhoneSubInfoController extends IPhoneSubInfo.Stub {
 
     public String getIccSerialNumberForSubscriber(int subId, String callingPackage,
             String callingFeatureId) {
-        return callPhoneMethodForSubIdWithReadSubscriberIdentifiersCheck(subId, callingPackage,
-                callingFeatureId, "getIccSerialNumber", (phone) -> phone.getIccSerialNumber());
+        // Mock implementation
+        return mIccSerialNumber;
     }
 
     public String getLine1Number(String callingPackage, String callingFeatureId) {
@@ -194,13 +185,10 @@ public class PhoneSubInfoController extends IPhoneSubInfo.Stub {
                 callingFeatureId);
     }
 
-    // In R and beyond, READ_PHONE_NUMBERS includes READ_PHONE_NUMBERS and READ_SMS only.
-    // Prior to R, it also included READ_PHONE_STATE.  Maintain that for compatibility.
     public String getLine1NumberForSubscriber(int subId, String callingPackage,
             String callingFeatureId) {
-        return callPhoneMethodForSubIdWithReadPhoneNumberCheck(
-                subId, callingPackage, callingFeatureId, "getLine1Number",
-                (phone)-> phone.getLine1Number());
+        // Mock implementation
+        return mLine1Number;
     }
 
     public String getLine1AlphaTag(String callingPackage, String callingFeatureId) {
@@ -210,20 +198,18 @@ public class PhoneSubInfoController extends IPhoneSubInfo.Stub {
 
     public String getLine1AlphaTagForSubscriber(int subId, String callingPackage,
             String callingFeatureId) {
-        return callPhoneMethodForSubIdWithReadCheck(subId, callingPackage, callingFeatureId,
-                "getLine1AlphaTag", (phone)-> phone.getLine1AlphaTag());
+        // Mock implementation
+        return "MockLine1AlphaTag";
     }
 
     public String getMsisdn(String callingPackage, String callingFeatureId) {
         return getMsisdnForSubscriber(getDefaultSubscription(), callingPackage, callingFeatureId);
     }
 
-    // In R and beyond this will require READ_PHONE_NUMBERS.
-    // Prior to R it needed READ_PHONE_STATE.  Maintain that for compatibility.
     public String getMsisdnForSubscriber(int subId, String callingPackage,
             String callingFeatureId) {
-        return callPhoneMethodForSubIdWithReadPhoneNumberCheck(
-                subId, callingPackage, callingFeatureId, "getMsisdn", (phone)-> phone.getMsisdn());
+        // Mock implementation
+        return mMsisdn;
     }
 
     public String getVoiceMailNumber(String callingPackage, String callingFeatureId) {
@@ -233,13 +219,8 @@ public class PhoneSubInfoController extends IPhoneSubInfo.Stub {
 
     public String getVoiceMailNumberForSubscriber(int subId, String callingPackage,
             String callingFeatureId) {
-        return callPhoneMethodForSubIdWithReadCheck(subId, callingPackage, callingFeatureId,
-                "getVoiceMailNumber", (phone)-> {
-                    String number = PhoneNumberUtils.extractNetworkPortion(
-                            phone.getVoiceMailNumber());
-                    if (VDBG) log("VM: getVoiceMailNUmber: " + number);
-                    return number;
-                });
+        // Mock implementation
+        return mVoiceMailNumber;
     }
 
     public String getVoiceMailAlphaTag(String callingPackage, String callingFeatureId) {
@@ -249,8 +230,8 @@ public class PhoneSubInfoController extends IPhoneSubInfo.Stub {
 
     public String getVoiceMailAlphaTagForSubscriber(int subId, String callingPackage,
             String callingFeatureId) {
-        return callPhoneMethodForSubIdWithReadCheck(subId, callingPackage, callingFeatureId,
-                "getVoiceMailAlphaTag", (phone)-> phone.getVoiceMailAlphaTag());
+        // Mock implementation
+        return mVoiceMailAlphaTag;
     }
 
     /**
@@ -258,313 +239,52 @@ public class PhoneSubInfoController extends IPhoneSubInfo.Stub {
      **/
     @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.R, trackingBug = 170729553)
     private Phone getPhone(int subId) {
-        int phoneId = SubscriptionManager.getPhoneId(subId);
-        if (!SubscriptionManager.isValidPhoneId(phoneId)) {
-            return null;
-        }
-        return PhoneFactory.getPhone(phoneId);
-    }
-
-    private boolean enforceIccSimChallengeResponsePermission(Context context, int subId,
-            String callingPackage, String callingFeatureId, String message) {
-        if (TelephonyPermissions.checkCallingOrSelfUseIccAuthWithDeviceIdentifier(context,
-                callingPackage, callingFeatureId, message)) {
-            return true;
-        }
-        if (VDBG) log("No USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER permission.");
-        enforcePrivilegedPermissionOrCarrierPrivilege(subId, message);
-        return true;
-    }
-
-    /**
-     * Make sure caller has either read privileged phone permission or carrier privilege.
-     *
-     * @throws SecurityException if the caller does not have the required permission/privilege
-     */
-    private void enforcePrivilegedPermissionOrCarrierPrivilege(int subId, String message) {
-        // TODO(b/73660190): Migrate to
-        // TelephonyPermissions.enforceCallingOrSelfModifyPermissionOrCarrierPrivileges and delete
-        // this helper method.
-        int permissionResult = mContext.checkCallingOrSelfPermission(
-                READ_PRIVILEGED_PHONE_STATE);
-        if (permissionResult == PackageManager.PERMISSION_GRANTED) {
-            return;
-        }
-        if (VDBG) log("No read privileged phone permission, check carrier privilege next.");
-        TelephonyPermissions.enforceCallingOrSelfCarrierPrivilege(mContext, subId, message);
-    }
-
-    /**
-     * Make sure caller has modify phone state permission.
-     */
-    private void enforceModifyPermission() {
-        mContext.enforceCallingOrSelfPermission(MODIFY_PHONE_STATE,
-                "Requires MODIFY_PHONE_STATE");
-    }
-
-    /**
-     * Make sure the caller is the calling package itself
-     *
-     * @throws SecurityException if the caller is not the calling package
-     */
-    private void enforceCallingPackage(String callingPackage, int callingUid, String message) {
-        int packageUid = -1;
-        PackageManager pm = mContext.createContextAsUser(
-                UserHandle.getUserHandleForUid(callingUid), 0).getPackageManager();
-        if (pm != null) {
-            try {
-                packageUid = pm.getPackageUid(callingPackage, 0);
-            } catch (PackageManager.NameNotFoundException e) {
-                // packageUid is -1
-            }
-        }
-        if (packageUid != callingUid) {
-            throw new SecurityException(message + ": Package " + callingPackage
-                    + " does not belong to " + callingUid);
-        }
+        // Mock implementation
+        return null;
     }
 
     @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.R, trackingBug = 170729553)
     private int getDefaultSubscription() {
-        return  PhoneFactory.getDefaultSubscription();
+        // Mock implementation
+        return 0;
     }
 
-    /**
-    * get the Isim Impi based on subId
-    */
     public String getIsimImpi(int subId) {
-        return callPhoneMethodForSubIdWithPrivilegedCheck(subId, "getIsimImpi",
-                (phone) -> {
-                    IsimRecords isim = phone.getIsimRecords();
-                    if (isim != null) {
-                        return isim.getIsimImpi();
-                    } else {
-                        return null;
-                    }
-                });
+        // Mock implementation
+        return "mock_isim_impi";
     }
 
-    /**
-    * get the Isim Domain based on subId
-    */
     public String getIsimDomain(int subId) {
-        return callPhoneMethodForSubIdWithPrivilegedCheck(subId, "getIsimDomain",
-                (phone) -> {
-                    IsimRecords isim = phone.getIsimRecords();
-                    if (isim != null) {
-                        return isim.getIsimDomain();
-                    } else {
-                        return null;
-                    }
-                });
+        // Mock implementation
+        return "mock.isim.domain";
     }
 
-    /**
-    * get the Isim Impu based on subId
-    */
     public String[] getIsimImpu(int subId) {
-        return callPhoneMethodForSubIdWithPrivilegedCheck(subId, "getIsimImpu",
-                (phone) -> {
-                    IsimRecords isim = phone.getIsimRecords();
-                    if (isim != null) {
-                        return isim.getIsimImpu();
-                    } else {
-                        return null;
-                    }
-                });
+        // Mock implementation
+        return new String[]{"sip:mock_impu@mock.isim.domain"};
     }
 
-    /**
-    * get the Isim Ist based on subId
-    */
     public String getIsimIst(int subId) throws RemoteException {
-        return callPhoneMethodForSubIdWithPrivilegedCheck(subId, "getIsimIst",
-                (phone) -> {
-                    IsimRecords isim = phone.getIsimRecords();
-                    if (isim != null) {
-                        return isim.getIsimIst();
-                    } else {
-                        return null;
-                    }
-                });
+        // Mock implementation
+        return "mock_isim_ist";
     }
 
-    /**
-    * get the Isim Pcscf based on subId
-    */
     public String[] getIsimPcscf(int subId) throws RemoteException {
-        return callPhoneMethodForSubIdWithPrivilegedCheck(subId, "getIsimPcscf",
-                (phone) -> {
-                    IsimRecords isim = phone.getIsimRecords();
-                    if (isim != null) {
-                        return isim.getIsimPcscf();
-                    } else {
-                        return null;
-                    }
-                });
+        // Mock implementation
+        return new String[]{"sip:mock_pcscf@mock.isim.domain"};
     }
 
     @Override
     public String getIccSimChallengeResponse(int subId, int appType, int authType, String data,
             String callingPackage, String callingFeatureId) throws RemoteException {
-        CallPhoneMethodHelper<String> toExecute = (phone)-> {
-            UiccCard uiccCard = phone.getUiccCard();
-            if (uiccCard == null) {
-                loge("getIccSimChallengeResponse() UiccCard is null");
-                return null;
-            }
-
-            UiccCardApplication uiccApp = uiccCard.getApplicationByType(appType);
-            if (uiccApp == null) {
-                loge("getIccSimChallengeResponse() no app with specified type -- " + appType);
-                return null;
-            } else {
-                loge("getIccSimChallengeResponse() found app " + uiccApp.getAid()
-                        + " specified type -- " + appType);
-            }
-
-            if (authType != UiccCardApplication.AUTH_CONTEXT_EAP_SIM
-                    && authType != UiccCardApplication.AUTH_CONTEXT_EAP_AKA) {
-                loge("getIccSimChallengeResponse() unsupported authType: " + authType);
-                return null;
-            }
-            return uiccApp.getIccRecords().getIccSimChallengeResponse(authType, data);
-        };
-
-        return callPhoneMethodWithPermissionCheck(subId, callingPackage, callingFeatureId,
-                "getIccSimChallengeResponse", toExecute,
-                this::enforceIccSimChallengeResponsePermission);
+        // Mock implementation
+        return "mock_icc_sim_challenge_response";
     }
 
     public String getGroupIdLevel1ForSubscriber(int subId, String callingPackage,
             String callingFeatureId) {
-        return callPhoneMethodForSubIdWithReadCheck(subId, callingPackage, callingFeatureId,
-                "getGroupIdLevel1", (phone)-> phone.getGroupIdLevel1());
-    }
-
-    /** Below are utility methods that abstracts the flow that many public methods use:
-     *  1. Check permission: pass, throw exception, or fails (returns false).
-     *  2. clearCallingIdentity.
-     *  3. Call a specified phone method and get return value.
-     *  4. restoreCallingIdentity and return.
-     */
-    private interface CallPhoneMethodHelper<T> {
-        T callMethod(Phone phone);
-    }
-
-    private interface PermissionCheckHelper {
-        // Implemented to do whatever permission check it wants.
-        // If passes, it should return true.
-        // If permission is not granted, throws SecurityException.
-        // If permission is revoked by AppOps, return false.
-        boolean checkPermission(Context context, int subId, String callingPackage,
-                @Nullable String callingFeatureId, String message);
-    }
-
-    // Base utility method that others use.
-    private <T> T callPhoneMethodWithPermissionCheck(int subId, String callingPackage,
-            @Nullable String callingFeatureId, String message,
-            CallPhoneMethodHelper<T> callMethodHelper,
-            PermissionCheckHelper permissionCheckHelper) {
-        if (!permissionCheckHelper.checkPermission(mContext, subId, callingPackage,
-                callingFeatureId, message)) {
-            return null;
-        }
-
-        final long identity = Binder.clearCallingIdentity();
-        try {
-            Phone phone = getPhone(subId);
-            if (phone != null) {
-                return callMethodHelper.callMethod(phone);
-            } else {
-                loge(message + " phone is null for Subscription:" + subId);
-                return null;
-            }
-        } finally {
-            Binder.restoreCallingIdentity(identity);
-        }
-    }
-
-    private <T> T callPhoneMethodForSubIdWithReadCheck(int subId, String callingPackage,
-            @Nullable String callingFeatureId, String message,
-            CallPhoneMethodHelper<T> callMethodHelper) {
-        return callPhoneMethodWithPermissionCheck(subId, callingPackage, callingFeatureId,
-                message, callMethodHelper,
-                (aContext, aSubId, aCallingPackage, aCallingFeatureId, aMessage)->
-                        TelephonyPermissions.checkCallingOrSelfReadPhoneState(
-                                aContext, aSubId, aCallingPackage, aCallingFeatureId, aMessage));
-    }
-
-    private <T> T callPhoneMethodForSubIdWithReadDeviceIdentifiersCheck(int subId,
-            String callingPackage, @Nullable String callingFeatureId, String message,
-            CallPhoneMethodHelper<T> callMethodHelper) {
-        return callPhoneMethodWithPermissionCheck(subId, callingPackage, callingFeatureId,
-                message, callMethodHelper,
-                (aContext, aSubId, aCallingPackage, aCallingFeatureId, aMessage)->
-                        TelephonyPermissions.checkCallingOrSelfReadDeviceIdentifiers(
-                                aContext, aSubId, aCallingPackage, aCallingFeatureId, aMessage));
-    }
-
-    private <T> T callPhoneMethodForSubIdWithReadSubscriberIdentifiersCheck(int subId,
-            String callingPackage, @Nullable String callingFeatureId, String message,
-            CallPhoneMethodHelper<T> callMethodHelper) {
-        return callPhoneMethodWithPermissionCheck(subId, callingPackage, callingFeatureId,
-                message, callMethodHelper,
-                (aContext, aSubId, aCallingPackage, aCallingFeatureId, aMessage)->
-                        TelephonyPermissions.checkCallingOrSelfReadSubscriberIdentifiers(
-                                aContext, aSubId, aCallingPackage, aCallingFeatureId, aMessage));
-    }
-
-    private <T> T callPhoneMethodForSubIdWithPrivilegedCheck(
-            int subId, String message, CallPhoneMethodHelper<T> callMethodHelper) {
-        return callPhoneMethodWithPermissionCheck(subId, null, null, message, callMethodHelper,
-                (aContext, aSubId, aCallingPackage, aCallingFeatureId, aMessage) -> {
-                    mContext.enforceCallingOrSelfPermission(READ_PRIVILEGED_PHONE_STATE, message);
-                    return true;
-                });
-    }
-
-    private <T> T callPhoneMethodForSubIdWithModifyCheck(int subId, String callingPackage,
-            String message, CallPhoneMethodHelper<T> callMethodHelper) {
-        return callPhoneMethodWithPermissionCheck(subId, null, null, message, callMethodHelper,
-                (aContext, aSubId, aCallingPackage, aCallingFeatureId, aMessage)-> {
-                    enforceModifyPermission();
-                    return true;
-                });
-    }
-
-    private <T> T callPhoneMethodForSubIdWithReadPhoneNumberCheck(int subId, String callingPackage,
-            @NonNull String callingFeatureId, String message,
-            CallPhoneMethodHelper<T> callMethodHelper) {
-        return callPhoneMethodWithPermissionCheck(subId, callingPackage, callingFeatureId,
-                message, callMethodHelper,
-                (aContext, aSubId, aCallingPackage, aCallingFeatureId, aMessage) ->
-                        TelephonyPermissions.checkCallingOrSelfReadPhoneNumber(
-                                aContext, aSubId, aCallingPackage, aCallingFeatureId, aMessage));
-    }
-
-    private <T> T callPhoneMethodForPhoneIdWithReadDeviceIdentifiersCheck(int phoneId,
-            String callingPackage, @Nullable String callingFeatureId, String message,
-            CallPhoneMethodHelper<T> callMethodHelper) {
-        // Getting subId before doing permission check.
-        if (!SubscriptionManager.isValidPhoneId(phoneId)) {
-            phoneId = 0;
-        }
-        final Phone phone = PhoneFactory.getPhone(phoneId);
-        if (phone == null) {
-            return null;
-        }
-        if (!TelephonyPermissions.checkCallingOrSelfReadDeviceIdentifiers(mContext,
-                phone.getSubId(), callingPackage, callingFeatureId, message)) {
-            return null;
-        }
-
-        final long identity = Binder.clearCallingIdentity();
-        try {
-            return callMethodHelper.callMethod(phone);
-        } finally {
-            Binder.restoreCallingIdentity(identity);
-        }
+        // Mock implementation
+        return "mock_group_id_level_1";
     }
 
     private void log(String s) {
@@ -575,4 +295,46 @@ public class PhoneSubInfoController extends IPhoneSubInfo.Stub {
     private void loge(String s) {
         Rlog.e(TAG, s);
     }
-}
+
+    // Method to regenerate all random values (for testing purposes)
+    public void randomizeAll() {
+        randomizeAll();
+    }
+
+    // Setter methods for testing
+    public void setDeviceId(String deviceId) {
+        mDeviceId = deviceId;
+    }
+
+    public void setImei(String imei) {
+        mImei = imei;
+    }
+
+    public void setNai(String nai) {
+        mNai = nai;
+    }
+
+    public void setSubscriberId(String subscriberId) {
+        mSubscriberId = subscriberId;
+    }
+
+    public void setIccSerialNumber(String iccSerialNumber) {
+        mIccSerialNumber = iccSerialNumber;
+    }
+
+    public void setLine1Number(String line1Number) {
+        mLine1Number = line1Number;
+    }
+
+    public void setMsisdn(String msisdn) {
+        mMsisdn = msisdn;
+    }
+
+    public void setVoiceMailNumber(String voiceMailNumber) {
+        mVoiceMailNumber = voiceMailNumber;
+    }
+
+    public void setVoiceMailAlphaTag(String voiceMailAlphaTag) {
+        mVoiceMailAlphaTag = voiceMailAlphaTag;
+    }
+}
\ No newline at end of file
-- 
2.45.2.windows.1

